---
import type { GetStaticPaths } from "astro";
import SmallForm from "../../components/SmallForm.astro";
import TextInput from "../../components/TextInput.astro";
import Layout from "../../layouts/Layout.astro";
import { bookingSchema } from "../../schemas/schemas";

export const getStaticPaths = (async () => {
  const response = await fetch("http://127.0.0.1:8000/reservas/");
  const data = await response.json();
  const bookings = data["bookings"];

  const paths = bookings.map((element: any) => {
    return { params: { uuid: element["uuid"] } };
  });

  return paths;
}) satisfies GetStaticPaths;

const { uuid } = Astro.params;

const guestResponse = await fetch(`http://127.0.0.1:8000/reservas/${uuid}`);
const data = await guestResponse.json();
const booking = await bookingSchema.parseAsync(data);
---

<Layout>
  <SmallForm id="update-booking-form">
    <div slot="inputs" class="flex flex-col items-center grow">
      <TextInput hidden id="uuid" label="uuid" value={booking.uuid} />
      <TextInput
        hidden
        id="locator"
        label="Localizador"
        value={booking.locator}
      />
      <div class="w-full grid grid-cols-2 p-4">
        <TextInput disabled id="status" label="Status" value={booking.status} />
        <TextInput
          disabled
          id="budget"
          label="Valor"
          value={Intl.NumberFormat("pt-BR", {
            currency: "BRL",
            style: "currency",
          }).format(booking.budget)}
        />
      </div>
      <div class="w-full grid grid-cols-2 p-4">
        <TextInput
          disabled
          id="guest_document"
          label="Documento"
          value=`${booking.guest.document}`
        />
        <TextInput
          disabled
          id="guest_name"
          label="Nome"
          value=`${booking.guest.name} ${booking.guest.surname}`
        />
      </div>

      <div class="w-full grid grid-cols-3 p-4 gap-4">
        <TextInput
          disabled
          id="accommodation_id"
          label="Acomodação"
          value={`${booking.accommodation.id} - ${booking.accommodation.name}`}
        />
        <TextInput
          disabled
          id="check_in"
          label="Check In"
          value={booking.check_in}
        />
        <TextInput
          disabled
          id="check_out"
          label="Check Out"
          value={booking.check_out}
        />
      </div>

      <div class="w-full p-4 grid grid-cols-3 gap-8">
        <button
          id="check_in_btn"
          type="button"
          class="bg-green-600 hover:bg-green-400 text-white hover:text-zinc-800 font-bold px-12 py-2 rounded-md mb-2 w-full">
          Fazer Check In
        </button>
        <button
          id="cancel_btn"
          type="button"
          class="bg-red-600 hover:bg-red-400 text-white hover:text-zinc-800 font-bold px-12 py-2 rounded-md mb-2 w-full">
          Cancelar
        </button>
        <button
          id="back_btn"
          type="button"
          class="bg-zinc-600 hover:bg-zinc-400 text-white hover:text-zinc-800 font-bold px-12 py-2 rounded-md mb-2 w-full">
          Voltar
        </button>
      </div>
    </div>
  </SmallForm>
</Layout>

<script>
  import { updateBookingSchema } from "../../schemas/schemas";
  const backBtn = document.getElementById("back_btn") as HTMLButtonElement;
  const cancelBtn = document.getElementById("cancel_btn") as HTMLButtonElement;
  const checkInBtn = document.getElementById("back_btn") as HTMLButtonElement;
  const form = document.getElementById(
    "update-booking-form"
  ) as HTMLFormElement;

  backBtn.addEventListener("click", () => {
    document.location.href = "/reservas";
  });

  cancelBtn.addEventListener("click", async () => {
    const data: any = {};
    const formElements = form.elements;

    for (const element of formElements) {
      if (element instanceof HTMLInputElement) {
        if (element.id == "accommodation_id") {
          const accommodation_id = element.value.split(" - ")[0];
          data[element.id] = accommodation_id;
        } else if (element.id == "guest_name") {
        } else if (element.id == "budget") {
          data[element.id] = element.value
            .replaceAll("R$", "")
            .replaceAll(".", "")
            .replace(",", ".")
            .trim();
        } else {
          data[element.id] = element.value;
        }
      }
    }

    const confirmed = confirm("Você deseja cancelar essa reserva?");
    if (!confirmed) {
      document.location.href = document.location.href;
    }

    const parse = await updateBookingSchema.safeParseAsync(data);

    if (!parse.success) {
      console.log(parse.error.errors);
    }

    if (parse.success) {
      parse.data.status = "Cancelado";
      console.log(parse.data);
      const uuid = (document.getElementById("uuid") as HTMLInputElement).value;
      const response = await fetch(`http://127.0.0.1:8000/reservas/${uuid}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(parse.data),
      });
      updateBookingSchema;
      if (response.status === 204) {
        window.location.href = "/reservas";
      }
    }
  });
</script>
