---
import type { GetStaticPaths } from "astro";
import CheckboxInput from "../../components/CheckboxInput.astro";
import Form from "../../components/Form.astro";
import NumberInputSmall from "../../components/NumberInputSmall.astro";
import TextInput from "../../components/TextInput.astro";
import Layout from "../../layouts/Layout.astro";
import { accommodationSchema } from "../../schemas/schemas";

export const getStaticPaths = (async () => {
  const response = await fetch("http://127.0.0.1:8000/acomodacoes");
  const data: any = await response.json();
  const paths = data["accommodations"].map((element: any) => {
    return { params: { id: element["id"] } };
  });

  return paths;
}) satisfies GetStaticPaths;

const { id } = Astro.params;

const accommodationResponse = await fetch(
  `http://127.0.0.1:8000/acomodacoes/${id}`
);
const data = await accommodationResponse.json();

const accommodation = await accommodationSchema.parseAsync(data);

const response = await fetch("http://127.0.0.1:8000/amenities");
const amenties_data = await response.json();
const amenities: { id: number; name: string }[] = amenties_data["amenities"];
---

<Layout>
  <Form id="update-accommodation-form">
    <div slot="inputs" class="flex flex-col gap-6">
      <div class="flex justify-between">
        <TextInput
          disabled
          id="id"
          label="Id"
          value={String(accommodation.id)}
        />
        <TextInput
          disabled
          id="created_at"
          label="Criado em"
          value={accommodation.created_at}
        />
      </div>
      <TextInput id="name" label="Nome" value={accommodation.name} />
      <TextInput id="status" label="Status" value={accommodation.status} />
      <div class="flex gap-4">
        <NumberInputSmall
          id="min_nights"
          label="Min. Noites"
          value={accommodation.min_nights}
        />
        <NumberInputSmall
          id="total_guests"
          label="Max. Hospedes"
          value={accommodation.total_guests}
        />
        <NumberInputSmall
          id="single_beds"
          label="Cama Solteiro"
          value={accommodation.single_beds}
        />
        <NumberInputSmall
          id="double_beds"
          label="Cama Casal"
          value={accommodation.double_beds}
        />
        <NumberInputSmall
          id="price"
          label="PreÃ§o"
          value={accommodation.price}
        />
      </div>
      <div
        class="amenities-list w-full h-[120px] flex p-2 justify-between flex-wrap">
        {
          amenities.map((amenitie) => {
            const isSelected = accommodation.amenities.find(
              (selectedAmenitie) => selectedAmenitie.name == amenitie.name
            );
            return isSelected ? (
              <CheckboxInput
                id={String(amenitie.id)}
                label={amenitie.name}
                checked
              />
            ) : (
              <CheckboxInput id={String(amenitie.id)} label={amenitie.name} />
            );
          })
        }
      </div>
    </div>

    <div slot="buttons" class="flex flex-col w-full items-center p-16">
      <div
        slot="buttons"
        class="flex w-full items-center p-16 align-middle justify-center gap-6">
        <button
          id="update_button"
          class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded w-56"
          type="submit">Atualizar</button
        >
        <button
          id="delete_button"
          class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded w-56"
          type="button">Excluir</button
        >
      </div>
    </div>
  </Form>
</Layout>

<script>
  import { accommodationSchema } from "../../schemas/schemas";

  const form = document.getElementById(
    "update-accommodation-form"
  ) as HTMLFormElement;

  form.addEventListener("submit", async (event) => {
    event.preventDefault();
    const data: any = {};
    const amenities = [];
    const formElements = form.elements;

    for (const element of formElements) {
      if (element instanceof HTMLInputElement) {
        if (element.checked) {
          amenities.push(element.name);
        }
        if (element.value !== "on") {
          data[element.id] = element.value;
        }
      }
    }
    data.amenities = amenities;

    console.log(data);

    // const parsedData = await accommodationSchema.safeParseAsync(data);

    // if (parsedData.success) {
    //   const {
    //     id,
    //     status,
    //     created_at,
    //     name,
    //     total_guests,
    //     single_beds,
    //     double_beds,
    //     min_nights,
    //     amenities,
    //     price,
    //   } = parsedData.data;

    //   const accommodationData = {
    //     id,
    //     status,
    //     created_at,
    //     name,
    //     total_guests,
    //     single_beds,
    //     double_beds,
    //     min_nights,
    //     amenities,
    //     price,
    //   };

    //   const response = await fetch("http://127.0.0.1:5000/api/acomodacoes", {
    //     method: "PUT",
    //     headers: {
    //       "Content-Type": "application/json",
    //     },
    //     body: JSON.stringify(accommodationData),
    //   });

    //   if (response.status === 201) {
    //     window.location.href = "/acomodacoes";
    //   }
  });

  const deleteButton = document.getElementById(
    "delete_button"
  ) as HTMLButtonElement;

  deleteButton.addEventListener("click", async () => {
    const element = form.elements.namedItem("id") as HTMLInputElement;
    const accommodationId = element.value;

    console.log(accommodationId);

    const response = await fetch(
      `http://127.0.0.1:8000/acomodacoes/${accommodationId}`,
      { method: "DELETE" }
    );

    if (response.status === 204) {
      window.location.href = "/acomodacoes";
    }
  });
</script>
